<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BCalcWrapper_dealLoadError" xml:space="preserve">
    <value>无法载入牌局</value>
  </data>
  <data name="BCalcWrapper_declarerError" xml:space="preserve">
    <value>庄家错误</value>
  </data>
  <data name="BCalcWrapper_trumpError" xml:space="preserve">
    <value>将牌错误</value>
  </data>
  <data name="DealerParser_errorGenerateOverflow" xml:space="preserve">
    <value>随机产生牌局数量设置的太大</value>
  </data>
  <data name="DealerParser_errorProduceOverflow" xml:space="preserve">
    <value>要生成的牌局数量设置的太大</value>
  </data>
  <data name="DealerParser_errorTooManyGenerate" xml:space="preserve">
    <value>产生牌局数量脚本太多值</value>
  </data>
  <data name="DealerParser_errorTooManyProduce" xml:space="preserve">
    <value>生成牌局数量脚本太多值</value>
  </data>
  <data name="DealerWrapper_errorFileNotFound" xml:space="preserve">
    <value>文件没有找到</value>
  </data>
  <data name="DealerWrapper_errorInvalidDealCount" xml:space="preserve">
    <value>产生牌局的数量不正确</value>
  </data>
  <data name="Form1_analyzeError" xml:space="preserve">
    <value>分析错误</value>
  </data>
  <data name="Form1_analyzeNoContractsError" xml:space="preserve">
    <value>没有设置定约</value>
  </data>
  <data name="Form1_analyzeNoDealsError" xml:space="preserve">
    <value>文件夹中没有发现牌局</value>
  </data>
  <data name="Form1_analyzeOpenFile" xml:space="preserve">
    <value>打开文件</value>
  </data>
  <data name="Form1_error" xml:space="preserve">
    <value>错误</value>
  </data>
  <data name="Form1_fileOpenError" xml:space="preserve">
    <value>打开文件错误</value>
  </data>
  <data name="Form1_generateFileNotFoundError" xml:space="preserve">
    <value>不能写入文件，请检查文件所在的文件夹是否存在</value>
  </data>
  <data name="Form1_generateFileSaved" xml:space="preserve">
    <value>文件写入</value>
  </data>
  <data name="Form1_generateGeneratorError" xml:space="preserve">
    <value>产生错误</value>
  </data>
  <data name="Form1_generateInputError" xml:space="preserve">
    <value>输入错误</value>
  </data>
  <data name="ScoreAccumulator_IMP" xml:space="preserve">
    <value>IMP</value>
  </data>
  <data name="ScoreAccumulator_MP" xml:space="preserve">
    <value>MP</value>
  </data>
  <data name="ScoreAccumulator_txtHeader" xml:space="preserve">
    <value>   定约     赢墩   得分    成功率   MP    IMP</value>
  </data>
  <data name="ScoreAccumulator_vulBoth" xml:space="preserve">
    <value>双有</value>
  </data>
  <data name="ScoreAccumulator_vulEW" xml:space="preserve">
    <value>东西</value>
  </data>
  <data name="ScoreAccumulator_vulnerability" xml:space="preserve">
    <value>局况</value>
  </data>
  <data name="ScoreAccumulator_vulNone" xml:space="preserve">
    <value>双无</value>
  </data>
  <data name="ScoreAccumulator_vulNS" xml:space="preserve">
    <value>南北</value>
  </data>
  <data name="Accumulator_analysisFinished" xml:space="preserve">
    <value>分析完成，结果写入文件</value>
  </data>
  <data name="Accumulator_analysisInterrupted" xml:space="preserve">
    <value>分析终止，部分结果写入文件</value>
  </data>
  <data name="Accumulator_errorNoDeals" xml:space="preserve">
    <value>牌局设置是空的</value>
  </data>
  <data name="Accumulator_playsIn" xml:space="preserve">
    <value>打</value>
  </data>
  <data name="Accumulator_tricks" xml:space="preserve">
    <value>赢墩</value>
  </data>
  <data name="Form1_exportSuccess" xml:space="preserve">
    <value>PBN 输出成功，保存到文件</value>
  </data>
</root>